{"version":3,"sources":["E:/node_modules/browser-pack/_prelude.js","E:/src/index.js","E:/src/org/puremvc/es6/multicore/core/Controller.js","E:/src/org/puremvc/es6/multicore/core/Model.js","E:/src/org/puremvc/es6/multicore/core/View.js","E:/src/org/puremvc/es6/multicore/patterns/command/MacroCommand.js","E:/src/org/puremvc/es6/multicore/patterns/command/SimpleCommand.js","E:/src/org/puremvc/es6/multicore/patterns/facade/Facade.js","E:/src/org/puremvc/es6/multicore/patterns/mediator/Mediator.js","E:/src/org/puremvc/es6/multicore/patterns/observer/Notification.js","E:/src/org/puremvc/es6/multicore/patterns/observer/Notifier.js","E:/src/org/puremvc/es6/multicore/patterns/observer/Observer.js","E:/src/org/puremvc/es6/multicore/patterns/proxy/Proxy.js","E:/src/puremvc.js","E:/src/utils/Utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","puremvc","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","default","_Observer","_View","Controller","key","_classCallCheck","view","commandMap","multitonKey","instanceMap","MULTITON_MSG","Array","initializeController","_View2","getInstance","note","commandClassRef","getName","commandInstance","initializeNotifier","execute","notificationName","registerObserver","_Observer2","executeCommand","hasCommand","removeObserver","Model","proxyMap","initializeModel","proxy","getProxyName","onRegister","proxyName","onRemove","View","mediatorMap","observerMap","initializeView","observer","push","notification","observers_ref","observers","len","_i","_len","notifyObserver","notifyContext","compareNotifyContext","splice","mediator","getMediatorName","interests","listNotificationInterests","handleNotification","mediatorName","_Notifier2","MacroCommand","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","subCommands","initializeMacroCommand","ref","shift","cmd","SimpleCommand","_Controller","_Model","_Notification","Facade","controller","model","initializeFacade","_Controller2","_Model2","registerCommand","removeCommand","registerProxy","retrieveProxy","removeProxy","hasProxy","registerMediator","retrieveMediator","removeMediator","hasMediator","body","type","notifyObservers","_Notification2","removeModel","removeView","removeController","Mediator","viewComponent","constructor","NAME","Notification","name","msg","toString","_Facade","Notifier","facade","getFacade","sendNotification","String","_Facade2","Observer","notifyMethod","notify","context","setNotifyMethod","setNotifyContext","getNotifyMethod","getNotifyContext","object","Proxy","data","setData","_SimpleCommand","_MacroCommand","_Mediator","_Notifier","_Proxy","_Utils","_SimpleCommand2","_MacroCommand2","_Mediator2","_Proxy2","extendClass","_Utils2","Utils","ClassFunc","BaseClass","prototype"],"mappings":"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","file":"puremvc.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = require('./puremvc').default;","import Observer from '../patterns/observer/Observer';\r\nimport View from './View';\r\n\r\nclass Controller {\r\n  view = null;\r\n  commandMap = null;\r\n  multitonKey = null;\r\n\r\n  constructor(key) {\r\n    if (Controller.instanceMap[key] != null) {\r\n      throw new Error(Controller.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    Controller.instanceMap[this.multitonKey] = this;\r\n    this.commandMap = new Array();\r\n    this.initializeController();\r\n  }\r\n\r\n  initializeController() {\r\n    this.view = View.getInstance(this.multitonKey);\r\n  }\r\n\r\n  executeCommand(note) {\r\n    let commandClassRef = this.commandMap[note.getName()];\r\n    if (commandClassRef == null) {\r\n      return;\r\n    }\r\n\r\n    let commandInstance = new commandClassRef();\r\n    commandInstance.initializeNotifier(this.multitonKey);\r\n    commandInstance.execute(note);\r\n  }\r\n\r\n  registerCommand(notificationName, commandClassRef) {\r\n    if (this.commandMap[notificationName] == null) {\r\n      this.view.registerObserver(notificationName, new Observer(this.executeCommand, this));\r\n    }\r\n\r\n    this.commandMap[notificationName] = commandClassRef;\r\n  }\r\n\r\n  hasCommand(notificationName) {\r\n    return this.commandMap[notificationName] != null;\r\n  }\r\n\r\n  removeCommand(notificationName) {\r\n    if (this.hasCommand(notificationName)) {\r\n      this.view.removeObserver(notificationName, this);\r\n      this.commandMap[notificationName] = null;\r\n    }\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"controller key for this Multiton key already constructed\";\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (null == Controller.instanceMap[key]) {\r\n      Controller.instanceMap[key] = new Controller(key);\r\n    }\r\n    return Controller.instanceMap[key];\r\n  }\r\n\r\n  static removeController(key) {\r\n    delete Controller.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Controller;","class Model {\r\n  proxyMap = null;\r\n  multitonKey= null;\r\n  constructor(key) {\r\n    if (Model.instanceMap[key]) {\r\n      throw new Error(Model.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    Model.instanceMap[key] = this;\r\n    this.proxyMap = [];\r\n    this.initializeModel();\r\n  }\r\n\r\n  initializeModel() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 注册代理\r\n   */\r\n  registerProxy(proxy) {\r\n    proxy.initializeNotifier(this.multitonKey);\r\n    this.proxyMap[proxy.getProxyName()] = proxy;\r\n    proxy.onRegister();\r\n  }\r\n\r\n  /**\r\n   * 取得中介\r\n   */\r\n  retrieveProxy(proxyName) {\r\n    return this.proxyMap[proxyName];\r\n  }\r\n\r\n  /**\r\n   * 是否存在中介\r\n   */\r\n  hasProxy(proxyName) {\r\n    return this.proxyMap[proxyName] != null;\r\n  }\r\n\r\n  /**\r\n   * 移除中介\r\n   */\r\n  removeProxy(proxyName) {\r\n    var proxy = this.proxyMap[proxyName];\r\n    if (proxy) {\r\n      this.proxyMap[proxyName] = null;\r\n      proxy.onRemove();\r\n    }\r\n\r\n    return proxy;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"Model instance for this Multiton key already constructed!\";\r\n  static removeModel(key) {\r\n    delete Model.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (Model.instanceMap[key] == null) {\r\n      Model.instanceMap[key] = new Model(key);\r\n    }\r\n\r\n    return Model.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Model;","import Observer from '../patterns/observer/Observer';\r\n\r\nclass View {\r\n  mediatorMap = null;\r\n  observerMap = null;\r\n  multitonKey = null;\r\n  constructor(key) {\r\n    if (View.instanceMap[key] != null) {\r\n      throw new Error(View.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    View.instanceMap[this.multitonKey] = this;\r\n    this.mediatorMap = [];\r\n    this.observerMap = [];\r\n    this.initializeView();\r\n  }\r\n\r\n  initializeView() {\r\n    return;\r\n  }\r\n\r\n  registerObserver(notificationName, observer) {\r\n    if (this.observerMap[notificationName] != null) {\r\n      this.observerMap[notificationName].push(observer);\r\n    } else {\r\n      this.observerMap[notificationName] = [observer];\r\n    }\r\n  }\r\n\r\n  notifyObservers(notification) {\r\n    if (this.observerMap[notification.getName()] != null) {\r\n      let observers_ref = this.observerMap[notification.getName()],\r\n        observers = [],\r\n        observer\r\n\r\n      for (let i = 0, len = observers_ref.length; i < len; i++) {\r\n        observer = observers_ref[i];\r\n        observers.push(observer);\r\n      }\r\n\r\n      for (let i = 0, len = observers.length; i < len; i++) {\r\n        observer = observers[i];\r\n        observer.notifyObserver(notification);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeObserver(notificationName, notifyContext) {\r\n    var observers = this.observerMap[notificationName];\r\n    for (let i = 0, len = observers.length; i < len; i++) {\r\n      if (observers[i].compareNotifyContext(notifyContext) == true) {\r\n        observers.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (observers.length == 0) {\r\n      delete this.observerMap[notificationName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册中介\r\n   */\r\n  registerMediator(mediator) {\r\n    if (this.mediatorMap[mediator.getMediatorName()] != null) {\r\n      return;\r\n    }\r\n\r\n    mediator.initializeNotifier(this.multitonKey);\r\n    // register the mediator for retrieval by name\r\n    this.mediatorMap[mediator.getMediatorName()] = mediator;\r\n\r\n    // get notification interests if any\r\n    let interests = mediator.listNotificationInterests();\r\n\r\n    // register mediator as an observer for each notification\r\n    if (interests.length > 0) {\r\n      // create observer referencing this mediators handleNotification method\r\n      let observer = new Observer(mediator.handleNotification, mediator);\r\n      for (let i = 0, len = interests.length; i < len; i++) {\r\n        this.registerObserver(interests[i], observer);\r\n      }\r\n    }\r\n\r\n    mediator.onRegister();\r\n  }\r\n\r\n  /**\r\n   * 根据中介名取得中介\r\n   */\r\n  retrieveMediator(mediatorName) {\r\n    return this.mediatorMap[mediatorName];\r\n  }\r\n\r\n  /**\r\n   * 移除中介\r\n   */\r\n  removeMediator(mediatorName) {\r\n    let mediator = this.mediatorMap[mediatorName];\r\n    if (mediator) {\r\n      // for every notification the mediator is interested in...\r\n      var interests = mediator.listNotificationInterests();\r\n      for (let i = 0, len = interests.length; i < len; i++) {\r\n        // remove the observer linking the mediator to the notification\r\n        // interest\r\n        this.removeObserver(interests[i], mediator);\r\n      }\r\n\r\n      // remove the mediator from the map\r\n      delete this.mediatorMap[mediatorName];\r\n\r\n      // alert the mediator that it has been removed\r\n      mediator.onRemove();\r\n    }\r\n\r\n    return mediator;\r\n  }\r\n\r\n  /**\r\n   * 是否存在中介\r\n   */\r\n  hasMediator(mediatorName) {\r\n    return this.mediatorMap[mediatorName] != null;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"View instance for this Multiton key already constructed!\";\r\n  static removeView(key) {\r\n    delete View.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (View.instanceMap[key] == null) {\r\n      View.instanceMap[key] = new View(key);\r\n    }\r\n\r\n    return View.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default View;","import Notifier from '../observer/Notifier';\r\n\r\nclass MacroCommand extends Notifier {\r\n  subCommands = null;\r\n  constructor() {\r\n    super();\r\n    this.subCommands = [];\r\n    this.initializeMacroCommand();\r\n  }\r\n  initializeMacroCommand() {\r\n    \r\n  }\r\n\r\n  addSubCommand(commandClassRef) {\r\n    this.subCommands.push(commandClassRef);\r\n  }\r\n\r\n  execute(note) {\r\n    while (this.subCommands.length > 0) {\r\n      var ref = this.subCommands.shift();\r\n      var cmd = new ref;\r\n      cmd.initializeNotifier(this.multitonKey);\r\n      cmd.execute(note);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MacroCommand;","import Notifier from '../observer/Notifier';\r\n\r\nclass SimpleCommand extends Notifier {\r\n  \r\n  /**\r\n   * 执行\r\n   * param note\r\n   */\r\n  execute(note) {\r\n\r\n  }\r\n}\r\n\r\nexport default SimpleCommand;","import Controller from '../../core/Controller';\r\nimport Model from '../../core/Model';\r\nimport View from '../../core/View';\r\nimport Notification from '../observer/Notification';\r\n\r\nclass Facade {\r\n  controller = null;\r\n  model = null;\r\n  view = null;\r\n  multitonKey = null;\r\n  constructor(key) {\r\n    if (Facade.instanceMap[key] != null) {\r\n      throw new Error(Facade.MULTITON_MSG);\r\n    }\r\n\r\n    this.initializeNotifier(key);\r\n    Facade.instanceMap[key] = this;\r\n    this.initializeFacade();\r\n  }\r\n\r\n  initializeFacade() {\r\n    this.initializeModel();\r\n    this.initializeController();\r\n    this.initializeView();\r\n  }\r\n\r\n  initializeController() {\r\n    if (this.controller != null) {\r\n      return;\r\n    }\r\n\r\n    this.controller = Controller.getInstance(this.multitonKey);\r\n  }\r\n\r\n  initializeModel() {\r\n    if (this.model != null) {\r\n      return;\r\n    }\r\n\r\n    this.model = Model.getInstance(this.multitonKey);\r\n  }\r\n\r\n  initializeView() {\r\n    if (this.view != null) {\r\n      return;\r\n    }\r\n\r\n    this.view = View.getInstance(this.multitonKey);\r\n  }\r\n\r\n  registerCommand(notificationName, commandClassRef) {\r\n    this.controller.registerCommand(notificationName, commandClassRef);\r\n  }\r\n\r\n  removeCommand(notificationName) {\r\n    this.controller.removeCommand(notificationName);\r\n  }\r\n\r\n  hasCommand(notificationName) {\r\n    return this.controller.hasCommand(notificationName);\r\n  }\r\n\r\n  registerProxy(proxy) {\r\n    this.model.registerProxy(proxy);\r\n  }\r\n\r\n  retrieveProxy(proxyName) {\r\n    return this.model.retrieveProxy(proxyName);\r\n  }\r\n\r\n  removeProxy(proxyName) {\r\n    let proxy = null;\r\n    if (this.model != null) {\r\n      proxy = this.model.removeProxy(proxyName);\r\n    }\r\n\r\n    return proxy;\r\n  }\r\n\r\n  hasProxy(proxyName) {\r\n    return this.model.hasProxy(proxyName);\r\n  }\r\n\r\n  registerMediator(mediator) {\r\n    if (this.view != null) {\r\n      this.view.registerMediator(mediator);\r\n    }\r\n  }\r\n\r\n  retrieveMediator(mediatorName) {\r\n    return this.view.retrieveMediator(mediatorName);\r\n  }\r\n\r\n  removeMediator(mediatorName) {\r\n    var mediator = null;\r\n    if (this.view != null) {\r\n      mediator = this.view.removeMediator(mediatorName);\r\n    }\r\n\r\n    return mediator;\r\n  }\r\n\r\n  hasMediator(mediatorName) {\r\n    return this.view.hasMediator(mediatorName);\r\n  }\r\n\r\n  sendNotification(notificationName, body, type) {\r\n    this.notifyObservers(new Notification(notificationName, body, type));\r\n  }\r\n\r\n  notifyObservers(notification) {\r\n    if (this.view != null) {\r\n      this.view.notifyObservers(notification);\r\n    }\r\n  }\r\n\r\n  initializeNotifier(key) {\r\n    this.multitonKey = key;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"Facade instance for this Multiton key already constructed!\";\r\n\r\n  static hasCore(key) {\r\n    return Facade.instanceMap[key] != null;\r\n  }\r\n\r\n  static removeCore(key) {\r\n    if (Facade.instanceMap[key] == null) {\r\n      return;\r\n    }\r\n\r\n    Model.removeModel(key);\r\n    View.removeView(key);\r\n    Controller.removeController(key);\r\n    delete Facade.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (Facade.instanceMap[key] == null) {\r\n      Facade.instanceMap[key] = new Facade(key);\r\n    }\r\n\r\n    return Facade.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Facade;","import Notifier from '../observer/Notifier';\r\nclass Mediator extends Notifier {\r\n  mediatorName = null;\r\n  viewComponent = null;\r\n  constructor(mediatorName, viewComponent) {\r\n    super();\r\n    this.mediatorName= mediatorName || this.constructor.NAME;\r\n    this.viewComponent=viewComponent;  \r\n  }\r\n\r\n  getMediatorName() {\r\n    return this.mediatorName;\r\n  }\r\n\r\n  setViewComponent(viewComponent) {\r\n    this.viewComponent= viewComponent;\r\n  }\r\n\r\n  getViewComponent() {\r\n    return this.viewComponent;\r\n  }\r\n\r\n  listNotificationInterests() {\r\n    return [];\r\n  }\r\n\r\n  handleNotification(notification) {\r\n    return;\r\n  }\r\n\r\n  onRegister() {\r\n    return;\r\n  }\r\n\r\n  onRemove() {\r\n    return;\r\n  }\r\n\r\n  static NAME = \"Mediator\";\r\n\r\n}\r\n\r\nexport default Mediator;","class Notification {\r\n  name = null;\r\n  type = null;\r\n  body = null;\r\n  constructor(name, body, type) {\r\n    this.name = name;\r\n    this.body = body;\r\n    this.type = type;\r\n  }\r\n\r\n  getName() {\r\n    return this.name;\r\n  }\r\n\r\n  setBody(body) {\r\n    this.body = body;\r\n  }\r\n\r\n  getBody() {\r\n    return this.body;\r\n  }\r\n\r\n  setType(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  getType() {\r\n    return this.type;\r\n  }\r\n\r\n  toString() {\r\n    let msg = \"Notification Name: \" + this.getName();\r\n    msg += \"\\nBody:\" + ((this.body == null) ? \"null\" : this.body.toString());\r\n    msg += \"\\nType:\" + ((this.type == null) ? \"null\" : this.type);\r\n    return msg;\r\n  }\r\n}\r\n\r\nexport default Notification;","import Facade from '../facade/Facade';\r\n\r\nclass Notifier {\r\n  facade = null;\r\n  multitonKey = null;\r\n  sendNotification(notificationName, body, type) {\r\n    let facade = this.getFacade();\r\n    if (facade) {\r\n      facade.sendNotification(notificationName, body, type);\r\n    }\r\n  }\r\n\r\n  initializeNotifier(key) {\r\n    this.multitonKey = String(key);\r\n    this.facade = this.getFacade();\r\n  }\r\n\r\n  getFacade() {\r\n    if (this.multitonKey == null) {\r\n      throw new Error(Notifier.MULTITON_MSG);\r\n    }\r\n\r\n    return Facade.getInstance(this.multitonKey);\r\n  }\r\n\r\n  static MULTITON_MSG = \"multitonKey for this Notifier not yet initialized!\";\r\n}\r\n\r\nexport default Notifier;","class Observer {\r\n  notify = null;\r\n  context = null;\r\n  constructor(notifyMethod, notifyContext) {\r\n    this.setNotifyMethod(notifyMethod);\r\n    this.setNotifyContext(notifyContext);\r\n  }\r\n\r\n  setNotifyMethod(notifyMethod) {\r\n    this.notify= notifyMethod;\r\n  }\r\n\r\n  setNotifyContext(notifyContext) {\r\n    this.context= notifyContext;\r\n  }\r\n\r\n  getNotifyMethod() {\r\n    return this.notify;\r\n  }\r\n\r\n  getNotifyContext() {\r\n    return this.context;\r\n  }\r\n\r\n  notifyObserver(notification) {\r\n    this.getNotifyMethod().call(this.getNotifyContext(), notification);\r\n  }\r\n\r\n  compareNotifyContext(object) {\r\n    return object === this.context;\r\n  }\r\n}\r\n\r\nexport default Observer;","import Notifier from '../observer/Notifier';\r\n\r\nclass Proxy extends Notifier {\r\n  proxyName = null;\r\n  data = null;\r\n  constructor(proxyName, data) {\r\n    super();\r\n    this.proxyName = proxyName || this.constructor.NAME;\r\n    if (data != null) {\r\n      this.setData(data);\r\n    }\r\n  }\r\n\r\n  getProxyName() {\r\n    return this.proxyName;\r\n  }\r\n\r\n  setData(data) {\r\n    this.data = data;\r\n  }\r\n\r\n  getData() {\r\n    return this.data;\r\n  }\r\n\r\n  onRegister() {\r\n    return;\r\n  }\r\n\r\n  onRemove() {\r\n    return;\r\n  }\r\n\r\n  static NAME = \"Proxy\";\r\n}\r\n\r\nexport default Proxy;","import View from './org/puremvc/es6/multicore/core/View';\r\nimport Model from './org/puremvc/es6/multicore/core/Model';\r\nimport Controller from './org/puremvc/es6/multicore/core/Controller';\r\nimport SimpleCommand from './org/puremvc/es6/multicore/patterns/command/SimpleCommand';\r\nimport MacroCommand from './org/puremvc/es6/multicore/patterns/command/MacroCommand';\r\nimport Facade from './org/puremvc/es6/multicore/patterns/facade/Facade';\r\nimport Mediator from './org/puremvc/es6/multicore/patterns/mediator/Mediator';\r\nimport Observer from './org/puremvc/es6/multicore/patterns/observer/Observer';\r\nimport Notification from './org/puremvc/es6/multicore/patterns/observer/Notification';\r\nimport Notifier from './org/puremvc/es6/multicore/patterns/observer/Notifier';\r\nimport Proxy from './org/puremvc/es6/multicore/patterns/proxy/Proxy';\r\nimport Utils from './utils/Utils';\r\n\r\nconst puremvc = {\r\n  View: View,\r\n  Model: Model,\r\n  Controller: Controller,\r\n  SimpleCommand: SimpleCommand,\r\n  MacroCommand: MacroCommand,\r\n  Facade: Facade,\r\n  Mediator: Mediator,\r\n  Observer: Observer,\r\n  Notification: Notification,\r\n  Notifier: Notifier,\r\n  Proxy: Proxy,\r\n  extendClass: Utils.extendClass\r\n};\r\n\r\nexport default puremvc;","class Utils {\r\n  static extendClass(ClassFunc) {\r\n    var BaseClass = ClassFunc;\r\n    BaseClass.prototype = new ClassFunc;\r\n    BaseClass.prototype.constructor = BaseClass;\r\n    return BaseClass;\r\n  }\r\n}\r\n\r\nexport default Utils;"]}