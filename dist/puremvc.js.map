{"version":3,"sources":["/node_modules/browser-pack/_prelude.js","/src/index.js","/src/org/puremvc/es6/multicore/core/Controller.js","/src/org/puremvc/es6/multicore/core/Model.js","/src/org/puremvc/es6/multicore/core/View.js","/src/org/puremvc/es6/multicore/patterns/command/MacroCommand.js","/src/org/puremvc/es6/multicore/patterns/command/SimpleCommand.js","/src/org/puremvc/es6/multicore/patterns/facade/Facade.js","/src/org/puremvc/es6/multicore/patterns/mediator/Mediator.js","/src/org/puremvc/es6/multicore/patterns/observer/Notification.js","/src/org/puremvc/es6/multicore/patterns/observer/Notifier.js","/src/org/puremvc/es6/multicore/patterns/observer/Observer.js","/src/org/puremvc/es6/multicore/patterns/proxy/Proxy.js","/src/puremvc.js","/src/utils/Utils.js"],"names":[],"mappings":"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","file":"puremvc.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = require('./puremvc').default;","import Observer from '../patterns/observer/Observer';\r\nimport View from './View';\r\n\r\nclass Controller {\r\n  view = null;\r\n  commandMap = null;\r\n  multitonKey = null;\r\n\r\n  constructor(key) {\r\n    if (Controller.instanceMap[key] != null) {\r\n      throw new Error(Controller.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    Controller.instanceMap[this.multitonKey] = this;\r\n    this.commandMap = new Array();\r\n    this.initializeController();\r\n  }\r\n\r\n  initializeController() {\r\n    this.view = View.getInstance(this.multitonKey);\r\n  }\r\n\r\n  executeCommand(note) {\r\n    let commandClassRef = this.commandMap[note.getName()];\r\n    if (commandClassRef == null) {\r\n      return;\r\n    }\r\n\r\n    let commandInstance = new commandClassRef();\r\n    commandInstance.initializeNotifier(this.multitonKey);\r\n    commandInstance.execute(note);\r\n  }\r\n\r\n  registerCommand(notificationName, commandClassRef) {\r\n    if (this.commandMap[notificationName] == null) {\r\n      this.view.registerObserver(notificationName, new Observer(this.executeCommand, this));\r\n    }\r\n\r\n    this.commandMap[notificationName] = commandClassRef;\r\n  }\r\n\r\n  hasCommand(notificationName) {\r\n    return this.commandMap[notificationName] != null;\r\n  }\r\n\r\n  removeCommand(notificationName) {\r\n    if (this.hasCommand(notificationName)) {\r\n      this.view.removeObserver(notificationName, this);\r\n      this.commandMap[notificationName] = null;\r\n    }\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"controller key for this Multiton key already constructed\";\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (null == Controller.instanceMap[key]) {\r\n      Controller.instanceMap[key] = new Controller(key);\r\n    }\r\n    return Controller.instanceMap[key];\r\n  }\r\n\r\n  static removeController(key) {\r\n    delete Controller.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Controller;","class Model {\r\n  proxyMap = null;\r\n  multitonKey= null;\r\n  constructor(key) {\r\n    if (Model.instanceMap[key]) {\r\n      throw new Error(Model.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    Model.instanceMap[key] = this;\r\n    this.proxyMap = [];\r\n    this.initializeModel();\r\n  }\r\n\r\n  initializeModel() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 注册代理\r\n   */\r\n  registerProxy(proxy) {\r\n    proxy.initializeNotifier(this.multitonKey);\r\n    this.proxyMap[proxy.getProxyName()] = proxy;\r\n    proxy.onRegister();\r\n  }\r\n\r\n  /**\r\n   * 取得中介\r\n   */\r\n  retrieveProxy(proxyName) {\r\n    return this.proxyMap[proxyName];\r\n  }\r\n\r\n  /**\r\n   * 是否存在中介\r\n   */\r\n  hasProxy(proxyName) {\r\n    return this.proxyMap[proxyName] != null;\r\n  }\r\n\r\n  /**\r\n   * 移除中介\r\n   */\r\n  removeProxy(proxyName) {\r\n    var proxy = this.proxyMap[proxyName];\r\n    if (proxy) {\r\n      this.proxyMap[proxyName] = null;\r\n      proxy.onRemove();\r\n    }\r\n\r\n    return proxy;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"Model instance for this Multiton key already constructed!\";\r\n  static removeModel(key) {\r\n    delete Model.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (Model.instanceMap[key] == null) {\r\n      Model.instanceMap[key] = new Model(key);\r\n    }\r\n\r\n    return Model.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Model;","import Observer from '../patterns/observer/Observer';\r\n\r\nclass View {\r\n  mediatorMap = null;\r\n  observerMap = null;\r\n  multitonKey = null;\r\n  constructor(key) {\r\n    if (View.instanceMap[key] != null) {\r\n      throw new Error(View.MULTITON_MSG);\r\n    }\r\n\r\n    this.multitonKey = key;\r\n    View.instanceMap[this.multitonKey] = this;\r\n    this.mediatorMap = [];\r\n    this.observerMap = [];\r\n    this.initializeView();\r\n  }\r\n\r\n  initializeView() {\r\n    return;\r\n  }\r\n\r\n  registerObserver(notificationName, observer) {\r\n    if (this.observerMap[notificationName] != null) {\r\n      this.observerMap[notificationName].push(observer);\r\n    } else {\r\n      this.observerMap[notificationName] = [observer];\r\n    }\r\n  }\r\n\r\n  notifyObservers(notification) {\r\n    if (this.observerMap[notification.getName()] != null) {\r\n      let observers_ref = this.observerMap[notification.getName()],\r\n        observers = [],\r\n        observer\r\n\r\n      for (let i = 0, len = observers_ref.length; i < len; i++) {\r\n        observer = observers_ref[i];\r\n        observers.push(observer);\r\n      }\r\n\r\n      for (let i = 0, len = observers.length; i < len; i++) {\r\n        observer = observers[i];\r\n        observer.notifyObserver(notification);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeObserver(notificationName, notifyContext) {\r\n    var observers = this.observerMap[notificationName];\r\n    for (let i = 0, len = observers.length; i < len; i++) {\r\n      if (observers[i].compareNotifyContext(notifyContext) == true) {\r\n        observers.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (observers.length == 0) {\r\n      delete this.observerMap[notificationName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册中介\r\n   */\r\n  registerMediator(mediator) {\r\n    if (this.mediatorMap[mediator.getMediatorName()] != null) {\r\n      return;\r\n    }\r\n\r\n    mediator.initializeNotifier(this.multitonKey);\r\n    // register the mediator for retrieval by name\r\n    this.mediatorMap[mediator.getMediatorName()] = mediator;\r\n\r\n    // get notification interests if any\r\n    let interests = mediator.listNotificationInterests();\r\n\r\n    // register mediator as an observer for each notification\r\n    if (interests.length > 0) {\r\n      // create observer referencing this mediators handleNotification method\r\n      let observer = new Observer(mediator.handleNotification, mediator);\r\n      for (let i = 0, len = interests.length; i < len; i++) {\r\n        this.registerObserver(interests[i], observer);\r\n      }\r\n    }\r\n\r\n    mediator.onRegister();\r\n  }\r\n\r\n  /**\r\n   * 根据中介名取得中介\r\n   */\r\n  retrieveMediator(mediatorName) {\r\n    return this.mediatorMap[mediatorName];\r\n  }\r\n\r\n  /**\r\n   * 移除中介\r\n   */\r\n  removeMediator(mediatorName) {\r\n    let mediator = this.mediatorMap[mediatorName];\r\n    if (mediator) {\r\n      // for every notification the mediator is interested in...\r\n      var interests = mediator.listNotificationInterests();\r\n      for (let i = 0, len = interests.length; i < len; i++) {\r\n        // remove the observer linking the mediator to the notification\r\n        // interest\r\n        this.removeObserver(interests[i], mediator);\r\n      }\r\n\r\n      // remove the mediator from the map\r\n      delete this.mediatorMap[mediatorName];\r\n\r\n      // alert the mediator that it has been removed\r\n      mediator.onRemove();\r\n    }\r\n\r\n    return mediator;\r\n  }\r\n\r\n  /**\r\n   * 是否存在中介\r\n   */\r\n  hasMediator(mediatorName) {\r\n    return this.mediatorMap[mediatorName] != null;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"View instance for this Multiton key already constructed!\";\r\n  static removeView(key) {\r\n    delete View.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (View.instanceMap[key] == null) {\r\n      View.instanceMap[key] = new View(key);\r\n    }\r\n\r\n    return View.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default View;","import Notifier from '../observer/Notifier';\r\n\r\nclass MacroCommand extends Notifier {\r\n  subCommands = null;\r\n  constructor() {\r\n    super();\r\n    this.subCommands = [];\r\n    this.initializeMacroCommand();\r\n  }\r\n  initializeMacroCommand() {\r\n    \r\n  }\r\n\r\n  addSubCommand(commandClassRef) {\r\n    this.subCommands.push(commandClassRef);\r\n  }\r\n\r\n  execute(note) {\r\n    while (this.subCommands.length > 0) {\r\n      var ref = this.subCommands.shift();\r\n      var cmd = new ref;\r\n      cmd.initializeNotifier(this.multitonKey);\r\n      cmd.execute(note);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MacroCommand;","import Notifier from '../observer/Notifier';\r\n\r\nclass SimpleCommand extends Notifier {\r\n  \r\n  /**\r\n   * 执行\r\n   * param note\r\n   */\r\n  execute(note) {\r\n\r\n  }\r\n}\r\n\r\nexport default SimpleCommand;","import Controller from '../../core/Controller';\r\nimport Model from '../../core/Model';\r\nimport View from '../../core/View';\r\nimport Notification from '../observer/Notification';\r\n\r\nclass Facade {\r\n  controller = null;\r\n  model = null;\r\n  view = null;\r\n  multitonKey = null;\r\n  constructor(key) {\r\n    if (Facade.instanceMap[key] != null) {\r\n      throw new Error(Facade.MULTITON_MSG);\r\n    }\r\n\r\n    this.initializeNotifier(key);\r\n    Facade.instanceMap[key] = this;\r\n    this.initializeFacade();\r\n  }\r\n\r\n  initializeFacade() {\r\n    this.initializeModel();\r\n    this.initializeController();\r\n    this.initializeView();\r\n  }\r\n\r\n  initializeController() {\r\n    if (this.controller != null) {\r\n      return;\r\n    }\r\n\r\n    this.controller = Controller.getInstance(this.multitonKey);\r\n  }\r\n\r\n  initializeModel() {\r\n    if (this.model != null) {\r\n      return;\r\n    }\r\n\r\n    this.model = Model.getInstance(this.multitonKey);\r\n  }\r\n\r\n  initializeView() {\r\n    if (this.view != null) {\r\n      return;\r\n    }\r\n\r\n    this.view = View.getInstance(this.multitonKey);\r\n  }\r\n\r\n  registerCommand(notificationName, commandClassRef) {\r\n    this.controller.registerCommand(notificationName, commandClassRef);\r\n  }\r\n\r\n  removeCommand(notificationName) {\r\n    this.controller.removeCommand(notificationName);\r\n  }\r\n\r\n  hasCommand(notificationName) {\r\n    return this.controller.hasCommand(notificationName);\r\n  }\r\n\r\n  registerProxy(proxy) {\r\n    this.model.registerProxy(proxy);\r\n  }\r\n\r\n  retrieveProxy(proxyName) {\r\n    return this.model.retrieveProxy(proxyName);\r\n  }\r\n\r\n  removeProxy(proxyName) {\r\n    let proxy = null;\r\n    if (this.model != null) {\r\n      proxy = this.model.removeProxy(proxyName);\r\n    }\r\n\r\n    return proxy;\r\n  }\r\n\r\n  hasProxy(proxyName) {\r\n    return this.model.hasProxy(proxyName);\r\n  }\r\n\r\n  registerMediator(mediator) {\r\n    if (this.view != null) {\r\n      this.view.registerMediator(mediator);\r\n    }\r\n  }\r\n\r\n  retrieveMediator(mediatorName) {\r\n    return this.view.retrieveMediator(mediatorName);\r\n  }\r\n\r\n  removeMediator(mediatorName) {\r\n    var mediator = null;\r\n    if (this.view != null) {\r\n      mediator = this.view.removeMediator(mediatorName);\r\n    }\r\n\r\n    return mediator;\r\n  }\r\n\r\n  hasMediator(mediatorName) {\r\n    return this.view.hasMediator(mediatorName);\r\n  }\r\n\r\n  sendNotification(notificationName, body, type) {\r\n    this.notifyObservers(new Notification(notificationName, body, type));\r\n  }\r\n\r\n  notifyObservers(notification) {\r\n    if (this.view != null) {\r\n      this.view.notifyObservers(notification);\r\n    }\r\n  }\r\n\r\n  initializeNotifier(key) {\r\n    this.multitonKey = key;\r\n  }\r\n\r\n  static instanceMap = [];\r\n  static MULTITON_MSG = \"Facade instance for this Multiton key already constructed!\";\r\n\r\n  static hasCore(key) {\r\n    return Facade.instanceMap[key] != null;\r\n  }\r\n\r\n  static removeCore(key) {\r\n    if (Facade.instanceMap[key] == null) {\r\n      return;\r\n    }\r\n\r\n    Model.removeModel(key);\r\n    View.removeView(key);\r\n    Controller.removeController(key);\r\n    delete Facade.instanceMap[key];\r\n  }\r\n\r\n  static getInstance(key) {\r\n    if (null == key) {\r\n      return null;\r\n    }\r\n\r\n    if (Facade.instanceMap[key] == null) {\r\n      Facade.instanceMap[key] = new Facade(key);\r\n    }\r\n\r\n    return Facade.instanceMap[key];\r\n  }\r\n}\r\n\r\nexport default Facade;","import Notifier from '../observer/Notifier';\r\nclass Mediator extends Notifier {\r\n  mediatorName = null;\r\n  viewComponent = null;\r\n  constructor(mediatorName, viewComponent) {\r\n    super();\r\n    this.mediatorName= mediatorName || this.constructor.NAME;\r\n    this.viewComponent=viewComponent;  \r\n  }\r\n\r\n  getMediatorName() {\r\n    return this.mediatorName;\r\n  }\r\n\r\n  setViewComponent(viewComponent) {\r\n    this.viewComponent= viewComponent;\r\n  }\r\n\r\n  getViewComponent() {\r\n    return this.viewComponent;\r\n  }\r\n\r\n  listNotificationInterests() {\r\n    return [];\r\n  }\r\n\r\n  handleNotification(notification) {\r\n    return;\r\n  }\r\n\r\n  onRegister() {\r\n    return;\r\n  }\r\n\r\n  onRemove() {\r\n    return;\r\n  }\r\n\r\n  static NAME = \"Mediator\";\r\n\r\n}\r\n\r\nexport default Mediator;","class Notification {\r\n  name = null;\r\n  type = null;\r\n  body = null;\r\n  constructor(name, body, type) {\r\n    this.name = name;\r\n    this.body = body;\r\n    this.type = type;\r\n  }\r\n\r\n  getName() {\r\n    return this.name;\r\n  }\r\n\r\n  setBody(body) {\r\n    this.body = body;\r\n  }\r\n\r\n  getBody() {\r\n    return this.body;\r\n  }\r\n\r\n  setType(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  getType() {\r\n    return this.type;\r\n  }\r\n\r\n  toString() {\r\n    let msg = \"Notification Name: \" + this.getName();\r\n    msg += \"\\nBody:\" + ((this.body == null) ? \"null\" : this.body.toString());\r\n    msg += \"\\nType:\" + ((this.type == null) ? \"null\" : this.type);\r\n    return msg;\r\n  }\r\n}\r\n\r\nexport default Notification;","import Facade from '../facade/Facade';\r\n\r\nclass Notifier {\r\n  facade = null;\r\n  multitonKey = null;\r\n  sendNotification(notificationName, body, type) {\r\n    let facade = this.getFacade();\r\n    if (facade) {\r\n      facade.sendNotification(notificationName, body, type);\r\n    }\r\n  }\r\n\r\n  initializeNotifier(key) {\r\n    this.multitonKey = String(key);\r\n    this.facade = this.getFacade();\r\n  }\r\n\r\n  getFacade() {\r\n    if (this.multitonKey == null) {\r\n      throw new Error(Notifier.MULTITON_MSG);\r\n    }\r\n\r\n    return Facade.getInstance(this.multitonKey);\r\n  }\r\n\r\n  static MULTITON_MSG = \"multitonKey for this Notifier not yet initialized!\";\r\n}\r\n\r\nexport default Notifier;","class Observer {\r\n  notify = null;\r\n  context = null;\r\n  constructor(notifyMethod, notifyContext) {\r\n    this.setNotifyMethod(notifyMethod);\r\n    this.setNotifyContext(notifyContext);\r\n  }\r\n\r\n  setNotifyMethod(notifyMethod) {\r\n    this.notify= notifyMethod;\r\n  }\r\n\r\n  setNotifyContext(notifyContext) {\r\n    this.context= notifyContext;\r\n  }\r\n\r\n  getNotifyMethod() {\r\n    return this.notify;\r\n  }\r\n\r\n  getNotifyContext() {\r\n    return this.context;\r\n  }\r\n\r\n  notifyObserver(notification) {\r\n    this.getNotifyMethod().call(this.getNotifyContext(), notification);\r\n  }\r\n\r\n  compareNotifyContext(object) {\r\n    return object === this.context;\r\n  }\r\n}\r\n\r\nexport default Observer;","import Notifier from '../observer/Notifier';\r\n\r\nclass Proxy extends Notifier {\r\n  proxyName = null;\r\n  data = null;\r\n  constructor(proxyName, data) {\r\n    super();\r\n    this.proxyName = proxyName || this.constructor.NAME;\r\n    if (data != null) {\r\n      this.setData(data);\r\n    }\r\n  }\r\n\r\n  getProxyName() {\r\n    return this.proxyName;\r\n  }\r\n\r\n  setData(data) {\r\n    this.data = data;\r\n  }\r\n\r\n  getData() {\r\n    return this.data;\r\n  }\r\n\r\n  onRegister() {\r\n    return;\r\n  }\r\n\r\n  onRemove() {\r\n    return;\r\n  }\r\n\r\n  static NAME = \"Proxy\";\r\n}\r\n\r\nexport default Proxy;","import View from './org/puremvc/es6/multicore/core/View';\r\nimport Model from './org/puremvc/es6/multicore/core/Model';\r\nimport Controller from './org/puremvc/es6/multicore/core/Controller';\r\nimport SimpleCommand from './org/puremvc/es6/multicore/patterns/command/SimpleCommand';\r\nimport MacroCommand from './org/puremvc/es6/multicore/patterns/command/MacroCommand';\r\nimport Facade from './org/puremvc/es6/multicore/patterns/facade/Facade';\r\nimport Mediator from './org/puremvc/es6/multicore/patterns/mediator/Mediator';\r\nimport Observer from './org/puremvc/es6/multicore/patterns/observer/Observer';\r\nimport Notification from './org/puremvc/es6/multicore/patterns/observer/Notification';\r\nimport Notifier from './org/puremvc/es6/multicore/patterns/observer/Notifier';\r\nimport Proxy from './org/puremvc/es6/multicore/patterns/proxy/Proxy';\r\nimport Utils from './utils/Utils';\r\n\r\nconst puremvc = {\r\n  View: View,\r\n  Model: Model,\r\n  Controller: Controller,\r\n  SimpleCommand: SimpleCommand,\r\n  MacroCommand: MacroCommand,\r\n  Facade: Facade,\r\n  Mediator: Mediator,\r\n  Observer: Observer,\r\n  Notification: Notification,\r\n  Notifier: Notifier,\r\n  Proxy: Proxy,\r\n  extendClass: Utils.extendClass\r\n};\r\n\r\nexport default puremvc;","class Utils {\r\n  static extendClass(ClassFunc) {\r\n    var BaseClass = ClassFunc;\r\n    BaseClass.prototype = new ClassFunc;\r\n    BaseClass.prototype.constructor = BaseClass;\r\n    return BaseClass;\r\n  }\r\n}\r\n\r\nexport default Utils;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}